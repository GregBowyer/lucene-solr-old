/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Policy file to prevent tests from writing outside the test sandbox directory
// (must be given as a sysprop: tests.sandbox.dir)
// This policy also disallows stuff like listening on network ports of interfaces
// different than 127.0.0.1.

// PLEASE NOTE: You may need to enable other permissions when new tests are added,
// everything not allowed here is forbidden!

grant {
  permission java.lang.RuntimePermission "*";

  // JAAS needs these and wont tell you it does !
  // Loads the jaas library for your platform e.g. jaas_unix
  permission java.lang.RuntimePermission "loadLibrary.*";
  permission java.lang.RuntimePermission "accessClassInPackage.sun.security.krb5";
    
  // contain read access to only what we need:
  permission java.io.FilePermission "<<ALL FILES>>", "read,execute,write,delete";
  // 3rd party jar resources (where symlinks are not supported), test-files/ resources
  permission java.io.FilePermission "${common.dir}${/}-", "read";
  // 3rd party jar resources (where symlinks are supported)
  permission java.io.FilePermission "${user.home}${/}.ivy2${/}cache${/}-", "read";
  // system jar resources, and let TestIndexWriterOnJRECrash fork its jvm
  permission java.io.FilePermission "${java.home}${/}-", "read,execute";
  // should be enclosed within common.dir, but just in case:
  permission java.io.FilePermission "${junit4.childvm.cwd}", "read";

  // write only to sandbox
  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp", "read,write,delete";
  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp${/}-", "read,write,delete";
  permission java.io.FilePermission "${junit4.childvm.cwd}${/}jacoco.db", "write";
  permission java.io.FilePermission "${junit4.childvm.cwd}", "read,write,delete";
  permission java.io.FilePermission "${junit4.tempDir}${/}*", "read,write,delete";
  permission java.io.FilePermission "${clover.db.dir}${/}-", "read,write,delete";

  // all possibilities of accepting/binding connections on localhost with ports >=1024:
  permission java.net.SocketPermission "localhost:1024-", "accept,listen";
  permission java.net.SocketPermission "127.0.0.1:1024-", "accept,listen";
  permission java.net.SocketPermission "[::1]:1024-", "accept,listen";
  
  // Allow connecting to the internet anywhere
  permission java.net.SocketPermission "*", "connect,resolve";

  // read, writer access to all system properties:
  permission java.util.PropertyPermission "*", "read,write";

  // access to hadoop env variables for hadoop test
  permission java.lang.RuntimePermission "getenv.HADOOP_HOME";
  permission java.lang.RuntimePermission "getenv.HADOOP_USER_NAME";
  permission java.lang.RuntimePermission "getenv.HADOOP_PROXY_USER";
  permission java.lang.RuntimePermission "getenv.HADOOP_TOKEN_FILE_LOCATION";
  permission java.lang.RuntimePermission "getenv.hadoop.metrics.init.mode";


  // needed by hadoop-auth
  permission javax.security.auth.AuthPermission "*";
  permission javax.security.auth.PrivateCredentialPermission "org.apache.hadoop.security.Credentials * \"*\"", "read";
  permission java.security.SecurityPermission "putProviderProperty.SaslPlainServer";
  permission java.security.SecurityPermission "insertProvider.SaslPlainServer";
  permission java.lang.RuntimePermission "getenv.HADOOP_JAAS_DEBUG";
  permission java.lang.RuntimePermission "getenv.KRB5CCNAME";

  // needed by hadoop to setup the MBean server
  permission javax.management.MBeanPermission "*", "*";
  permission javax.management.MBeanServerPermission "*";
  permission javax.management.MBeanTrustPermission "*";

  // needed by gson serialization of junit4 runner: TODO clean that up
  permission java.lang.RuntimePermission "accessDeclaredMembers";
  permission java.lang.reflect.ReflectPermission "suppressAccessChecks";

  // needed by junit4 runner to capture sysout/syserr:
  permission java.lang.RuntimePermission "setIO";

  // needed by randomized runner to catch failures from other threads:
  permission java.lang.RuntimePermission "setDefaultUncaughtExceptionHandler";

  // needed by randomized runner getTopThreadGroup:
  permission java.lang.RuntimePermission "modifyThreadGroup";

  // needed by tests e.g. shutting down executors:
  permission java.lang.RuntimePermission "modifyThread";

  // needed for tons of test hacks etc
  permission java.lang.RuntimePermission "getStackTrace";

  // needed for mock filesystems in tests
  permission java.lang.RuntimePermission "fileSystemProvider";

  // needed for mock filesystems in tests (to capture implCloseChannel) 
  permission java.lang.RuntimePermission "accessClassInPackage.sun.nio.ch";

  // needed by junit nested compat tests (due to static fields reflection), TODO clean these up:
  permission java.lang.RuntimePermission "accessClassInPackage.sun.util.calendar";
  permission java.lang.RuntimePermission "accessClassInPackage.sun.util.locale";
  permission java.lang.RuntimePermission "accessClassInPackage.sun.nio.fs";

  // needed by queryparser/ NLS., TODO clean this up:
  permission java.lang.RuntimePermission "accessClassInPackage.sun.util";

  // needed for test of IOUtils.spins (maybe it can be avoided)
  permission java.lang.RuntimePermission "getFileStoreAttributes";

  // analyzers/morfologik: needed for a horrible context classloader hack for solr in morfologikfilter: nuke this
  permission java.lang.RuntimePermission "setContextClassLoader";

  // analyzers/uima: needed by UIMA message localization... (?)
  permission java.lang.RuntimePermission "createSecurityManager";
  permission java.lang.RuntimePermission "createClassLoader";

  // expressions TestCustomFunctions (only on older java8?)
  permission java.lang.RuntimePermission "getClassLoader";

  // needed to test unmap hack on platforms that support it
  permission java.lang.RuntimePermission "accessClassInPackage.sun.misc";

  // needed by cyberneko usage by benchmarks on J9
  permission java.lang.RuntimePermission "accessClassInPackage.org.apache.xerces.util";

  // needed by jacoco to dump coverage
  permission java.lang.RuntimePermission "shutdownHooks";
};
